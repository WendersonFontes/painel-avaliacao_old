# app.py
# Vers√£o Streamlit com Desativa√ß√£o (Inativo) + Relat√≥rio CSV + Reativa√ß√£o
import streamlit as st
import pandas as pd
import io, zipfile, os
from datetime import datetime

st.set_page_config(page_title="Painel de Avalia√ß√£o - Streamlit", layout="wide")

# ---------- Config ----------
SENHA_PADRAO = "1234"
VAGAS_POR_SALA = 6
SALAS_INFO = [(1, "Hidrossanit√°rio"), (2, "Hidrossanit√°rio"), (3, "El√©trica"), (4, "El√©trica")]
CLASSES = ["S", "A", "B", "C", "D"]

# Crit√©rios (igual ao que voc√™ j√° conhece)
CRITERIOS = {
    "Qualidade T√©cnica": [
        (10, "Nenhum erro, projeto independente", "Acur√°cia 100%"),
        (9,  "Quase sem falhas, ainda n√£o independente", "Acur√°cia >90%"),
        (8,  "Bom projeto, ajustes de organiza√ß√£o", "Ajustes leves de organiza√ß√£o"),
        (7,  "Bom projeto, alguns ajustes t√©cnicos", "Ajustes t√©cnicos solicitados"),
        (6,  "Projeto razo√°vel, muitos coment√°rios", "Razo√°vel, precisa de revis√£o"),
        (5,  "Uso errado de materiais ou modelagem", "Erro de materiais/modelagem"),
        (4,  "Erro grave em 1 projeto", "Erro grave √∫nico"),
        (3,  "Dois ou mais erros graves", "Erros graves m√∫ltiplos")
    ],
    "Proatividade": [
        (10, "4 ou mais a√ß√µes al√©m do b√°sico", "Proativo extremo"),
        (9,  "3 a√ß√µes", "Muito proativo"),
        (8,  "2 a√ß√µes", "Proativo"),
        (7,  "1 a√ß√£o", "Alguma proatividade"),
        (6,  "Faz o b√°sico e pede novas demandas", "B√°sico + iniciativa m√≠nima"),
        (5,  "Fala que acabou, mas n√£o quer novos projetos", "Pouca disposi√ß√£o"),
        (3,  "Nenhuma a√ß√£o", "Inativo")
    ],
    "Colabora√ß√£o em equipe": [
        (10, "Sempre ajuda primeiro, acompanha at√© resolver", "Sempre ajuda primeiro"),
        (9,  "Frequentemente ajuda primeiro e acompanha", "Ajuda frequente"),
        (8,  "Boa disposi√ß√£o, ajuda, mas n√£o √© o primeiro", "Dispon√≠vel para ajudar"),
        (6,  "Oferece ajuda, mas pouco disposto", "Ajuda limitada"),
        (5,  "S√≥ escuta, n√£o se envolve", "Escuta passiva"),
        (3,  "Nunca ajuda, n√£o se disp√µe", "N√£o colaborativo")
    ],
    "Comunica√ß√£o": [
        (10, "Clareza total, escuta ativa, escreve bem", "Comunica√ß√£o perfeita"),
        (9,  "Clareza, escuta ativa, e-mails/WhatsApp ok", "Comunica√ß√£o boa"),
        (7,  "Clareza, escuta ativa, mas escrita ruim", "Comunica√ß√£o com falhas"),
        (6,  "Clareza m√©dia, escuta/ escrita irregular", "Comunica√ß√£o m√©dia"),
        (5,  "Clareza limitada, escuta irregular", "Comunica√ß√£o fraca"),
        (3,  "N√£o comunica claramente, n√£o escuta", "Comunica√ß√£o ruim")
    ],
    "Organiza√ß√£o / Planejamento": [
        (10, "Muito organizado, ajuda o coordenador", "Organiza√ß√£o exemplar"),
        (9,  "Organizado, segue procedimentos, sugere melhorias", "Organizado e propositivo"),
        (7,  "Respeita procedimentos, sem sugest√£o", "Organizado b√°sico"),
        (6,  "Uma chamada de aten√ß√£o", "Pouco organizado"),
        (5,  "Duas chamadas de aten√ß√£o", "Desorganizado"),
        (3,  "Tr√™s ou mais chamadas", "Muito desorganizado")
    ],
    "Dedica√ß√£o em estudos": [
        (10, "Anota sempre, faz cursos, aplica treinamentos, traz solu√ß√µes", "Estudo constante e aplicado"),
        (9,  "Anota, faz cursos, aproveita treinamentos, √†s vezes traz solu√ß√µes", "Estudo aplicado"),
        (7,  "Anota √†s vezes, raramente traz solu√ß√µes", "Dedica√ß√£o parcial"),
        (6,  "Anota pouco, n√£o faz cursos, n√£o traz solu√ß√µes", "Pouca dedica√ß√£o"),
        (5,  "Repete perguntas, n√£o usa cursos", "Dedica√ß√£o m√≠nima"),
        (3,  "Repete muitas vezes, n√£o aproveita cursos", "Sem dedica√ß√£o")
    ],
    "Cumprimento de prazos": [
        (10, "Nenhum atraso", "Pontualidade total"),
        (9,  "1 atraso justificado", "Quase pontual"),
        (8,  "2 atrasos justificados", "Pontualidade razo√°vel"),
        (7,  "3 atrasos justificados", "Atrasos frequentes"),
        (6,  "4 atrasos justificados", "Atrasos cont√≠nuos"),
        (5,  "1 atraso n√£o justificado", "Atraso sem justificativa"),
        (4,  "2 atrasos n√£o justificados", "Atrasos problem√°ticos"),
        (3,  "Mais de 2 atrasos n√£o justificados", "Muito atrasado")
    ],
    "Engajamento com Odoo": [
        (10, "Usa todos apps, sugere melhorias, cobra colegas", "Engajamento total"),
        (9,  "Usa boa parte dos apps, abre todo dia, cobra colegas", "Engajamento alto"),
        (7,  "Usa parte dos apps, abre todo dia, n√£o cobra colegas", "Engajamento moderado"),
        (6,  "Usa parte dos apps, abre todo dia, mas n√£o durante todo o dia", "Uso limitado"),
        (5,  "Usa apenas parte dos apps, abre de forma irregular", "Uso m√≠nimo"),
        (3,  "N√£o usa corretamente, resiste √† ferramenta", "Resist√™ncia total")
    ]
}

# ---------- Helpers ----------
def pontos_por_nota(n):
    if n==10: return 3
    if n==9: return 2
    if n==8: return 1
    return 0

def init_state():
    if "df" not in st.session_state:
        rows=[]
        for sala,equipe in SALAS_INFO:
            for _ in range(VAGAS_POR_SALA):
                rows.append({"Sala":sala,"Equipe":equipe,"Classe":"-","Projetista":"-","Pontua√ß√£o":0})
        st.session_state.df = pd.DataFrame(rows)
    if "historico" not in st.session_state:
        st.session_state.historico = pd.DataFrame(columns=["Timestamp","Disciplina","Demanda","Projetista","Par√¢metro","Nota","Resumo","PontosAtribu√≠dos"])
    if "inativos" not in st.session_state:
        # lista de dicts: {"Projetista":str,"Pontua√ß√£o":int,"removetime":timestamp}
        st.session_state.inativos = []
    if "last_df" not in st.session_state:
        st.session_state.last_df = None
        st.session_state.last_hist = None
    if "logged" not in st.session_state:
        st.session_state.logged = False
    if "status_msg" not in st.session_state:
        st.session_state.status_msg = ""

init_state()

def salvar_snapshot():
    st.session_state.last_df = st.session_state.df.copy(deep=True)
    st.session_state.last_hist = st.session_state.historico.copy(deep=True)

def desfazer():
    if st.session_state.last_df is None and st.session_state.last_hist is None:
        st.warning("Nada para desfazer.")
        return
    st.session_state.df = st.session_state.last_df.copy(deep=True) if st.session_state.last_df is not None else st.session_state.df
    st.session_state.historico = st.session_state.last_hist.copy(deep=True) if st.session_state.last_hist is not None else st.session_state.historico
    st.session_state.last_df = None
    st.session_state.last_hist = None
    st.success("√öltima a√ß√£o desfeita.")

def calcular_rankings():
    df = st.session_state.df
    df["RankingClasse"] = "-"
    for classe in CLASSES:
        subset = df[df["Classe"]==classe].copy()
        if subset.empty: continue
        subset_sorted = subset.sort_values("Pontua√ß√£o", ascending=False)
        for rank, (idx, _) in enumerate(subset_sorted.iterrows(), start=1):
            if df.at[idx,"Pontua√ß√£o"]>0:
                df.at[idx,"RankingClasse"]=rank
            else:
                df.at[idx,"RankingClasse"]="-"
    st.session_state.df = df

# ---------- UI topo ----------
st.title("Painel de Avalia√ß√£o de Projetistas (Streamlit)")
st.markdown("Sistema com hist√≥rico, backup, desativa√ß√£o/reativa√ß√£o e gest√£o de pontua√ß√µes.")

# Sidebar auth
st.sidebar.header("Acesso")
senha = st.sidebar.text_input("Senha do Coordenador", type="password")
if st.sidebar.button("Entrar"):
    if senha == SENHA_PADRAO:
        st.session_state.logged = True
        st.session_state.status_msg = ""
        st.sidebar.success("Acesso concedido")
    else:
        st.session_state.logged = False
        st.session_state.status_msg = "Senha incorreta!"
        st.sidebar.error("Senha incorreta!")

if st.session_state.status_msg:
    st.sidebar.warning(st.session_state.status_msg)

# resumo topo
def resumo_topo():
    df = st.session_state.df
    ativos = df[df["Projetista"]!="-"]
    st.markdown(f"**Projetistas ativos:** {len(ativos)} ‚Äî **Vagas livres:** {len(df)-len(ativos)}  \nHidrossanit√°rio: {len(ativos[ativos['Equipe']=='Hidrossanit√°rio'])} | El√©trica: {len(ativos[ativos['Equipe']=='El√©trica'])}")

resumo_topo()

# ---------- Main visualiza√ß√µes ----------
calcular_rankings()
st.header("Visualiza√ß√µes")
col1,col2 = st.columns(2)
with col1:
    st.subheader("Por Sala")
    df = st.session_state.df.copy()
    for sala in sorted(df["Sala"].unique()):
        equipe = df[df["Sala"]==sala]["Equipe"].iloc[0]
        st.write(f"üè¢ Sala {sala} ({equipe})")
        subset = df[df["Sala"]==sala][["Projetista","Equipe","Classe","RankingClasse","Pontua√ß√£o"]].reset_index(drop=True)
        st.dataframe(subset, use_container_width=True)
with col2:
    st.subheader("Ranking por Classe (apenas Ativos)")
    df_act = st.session_state.df[st.session_state.df["Projetista"]!="-"]
    for classe in CLASSES:
        sub = df_act[df_act["Classe"]==classe].sort_values("Pontua√ß√£o", ascending=False)
        if not sub.empty:
            st.write(f"**Classe {classe}**")
            st.dataframe(sub[["Projetista","Equipe","Sala","Pontua√ß√£o","RankingClasse"]].reset_index(drop=True), use_container_width=True)
    st.subheader("Ranking Geral (apenas Ativos)")
    geral = df_act.sort_values("Pontua√ß√£o", ascending=False).reset_index(drop=True)
    if not geral.empty:
        geral["Ranking Geral"] = geral.index + 1
        geral["Ranking Geral"] = geral.apply(lambda x: x["Ranking Geral"] if x["Pontua√ß√£o"]>0 else "-", axis=1)
        st.dataframe(geral[["Ranking Geral","Projetista","Equipe","Classe","Sala","RankingClasse","Pontua√ß√£o"]], use_container_width=True)
    else:
        st.info("Nenhum projetista alocado ainda.")
st.markdown("---")

# Hist√≥rico (inclui Inativos marcados)
st.subheader("Hist√≥rico de Demandas (acumulativo)")
hist = st.session_state.historico.copy()
if hist.empty:
    st.info("Nenhuma demanda registrada.")
else:
    t1,t2 = st.tabs(["Hidrossanit√°rio","El√©trica"])
    with t1:
        hid = hist[hist["Disciplina"]=="Hidrossanit√°rio"].sort_values("Timestamp", ascending=False).reset_index(drop=True)
        if not hid.empty:
            st.dataframe(hid, use_container_width=True)
        else:
            st.info("Nenhuma demanda Hidrossanit√°rio.")
    with t2:
        ele = hist[hist["Disciplina"]=="El√©trica"].sort_values("Timestamp", ascending=False).reset_index(drop=True)
        if not ele.empty:
            st.dataframe(ele, use_container_width=True)
        else:
            st.info("Nenhuma demanda El√©trica.")

st.markdown("---")

# ---------- Sidebar: painel do coordenador (aparece apenas se logged) ----------
st.sidebar.header("Painel do Coordenador")
if not st.session_state.logged:
    st.sidebar.info("Fa√ßa login para gerenciar o painel.")
else:
    # Projetistas: adicionar
    st.sidebar.subheader("Projetistas")
    with st.sidebar.expander("‚ûï Adicionar Projetista", expanded=False):
        novo_nome = st.text_input("Nome do projetista", key="add_name")
        disciplina = st.selectbox("Disciplina", options=["Hidrossanit√°rio","El√©trica"], key="add_disc")
        salas_op = [s for s,e in SALAS_INFO if e==disciplina]
        sala_choice = st.selectbox("Sala", options=salas_op, key="add_sala")
        classe_choice = st.selectbox("Classe", options=CLASSES, key="add_classe")
        if st.button("Adicionar"):
            if not novo_nome.strip():
                st.sidebar.warning("Informe nome v√°lido.")
            else:
                vagas = st.session_state.df[(st.session_state.df["Sala"]==sala_choice) & (st.session_state.df["Projetista"]=="-")]
                if vagas.empty:
                    st.sidebar.error("Sala cheia.")
                else:
                    salvar_snapshot()
                    idx = vagas.index[0]
                    st.session_state.df.at[idx,"Projetista"] = novo_nome.strip()
                    st.session_state.df.at[idx,"Equipe"] = disciplina
                    st.session_state.df.at[idx,"Classe"] = classe_choice
                    st.session_state.df.at[idx,"Pontua√ß√£o"] = 0
                    st.sidebar.success(f"Projetista '{novo_nome}' adicionado.")

    # Renomear
    with st.sidebar.expander("‚úèÔ∏è Renomear Projetista", expanded=False):
        ativos = st.session_state.df[st.session_state.df["Projetista"]!="-"]["Projetista"].tolist()
        sel_ren = st.selectbox("Projetista", options=ativos, key="rn_sel") if ativos else None
        novo_rn = st.text_input("Novo nome", key="rn_new")
        if st.button("Atualizar nome"):
            if not sel_ren or not novo_rn.strip():
                st.sidebar.warning("Escolha e informe novo nome.")
            else:
                salvar_snapshot()
                st.session_state.df.loc[st.session_state.df["Projetista"]==sel_ren,"Projetista"] = novo_rn.strip()
                # tamb√©m atualizar hist√≥rico? mantemos hist√≥rico com nome antigo para rastreio
                st.sidebar.success("Nome atualizado no quadro (hist√≥rico preserva o registro).")

    # Alterar classe
    with st.sidebar.expander("üè∑Ô∏è Alterar Classe", expanded=False):
        ativos2 = st.session_state.df[st.session_state.df["Projetista"]!="-"]["Projetista"].tolist()
        sel_cl = st.selectbox("Projetista", options=ativos2, key="cl_sel") if ativos2 else None
        nova_cl = st.selectbox("Nova Classe", options=CLASSES, key="cl_new")
        if st.button("Alterar classe"):
            if not sel_cl:
                st.sidebar.warning("Selecione um projetista.")
            else:
                salvar_snapshot()
                st.session_state.df.loc[st.session_state.df["Projetista"]==sel_cl,"Classe"] = nova_cl
                st.sidebar.success("Classe alterada.")

    # Remover / Inativar com relat√≥rio
    with st.sidebar.expander("üóëÔ∏è Desativar (Inativar) Projetista", expanded=False):
        ativos3 = st.session_state.df[st.session_state.df["Projetista"]!="-"]["Projetista"].tolist()
        sel_rem = st.selectbox("Projetista a desativar", options=ativos3, key="rem_sel") if ativos3 else None
        if sel_rem:
            st.markdown("Ao desativar, ser√° gerado um CSV com o hist√≥rico do projetista para download. Em seguida a vaga ser√° liberada.")
            if st.button("Gerar relat√≥rio e preparar desativa√ß√£o"):
                # gerar CSV do hist√≥rico do projetista
                hist_proj = st.session_state.historico[st.session_state.historico["Projetista"]==sel_rem].copy()
                # tamb√©m incluir demandas onde j√° est√° marcado como Inativo (por seguran√ßa)
                hist_proj = pd.concat([hist_proj, st.session_state.historico[st.session_state.historico["Projetista"]==f"{sel_rem} (Inativo)"]]).drop_duplicates().sort_values("Timestamp", ascending=False)
                if hist_proj.empty:
                    st.sidebar.info("Sem hist√≥rico para este projetista. Ainda ser√° poss√≠vel desativar.")
                csv_bytes = hist_proj.to_csv(index=False).encode("utf-8")
                nomefile = f"historico_{sel_rem}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
                st.sidebar.download_button("‚¨áÔ∏è Baixar relat√≥rio CSV antes da desativa√ß√£o", data=csv_bytes, file_name=nomefile, mime="text/csv")
                st.session_state.pending_desativacao = sel_rem
                st.sidebar.info("Relat√≥rio gerado ‚Äî agora confirme a desativa√ß√£o.")
            if st.session_state.get("pending_desativacao") == sel_rem:
                if st.button("Confirmar desativa√ß√£o e liberar vaga"):
                    salvar_snapshot()
                    name = st.session_state.pending_desativacao
                    # salvar info em inativos
                    idx_row = st.session_state.df[st.session_state.df["Projetista"]==name].index[0]
                    pontos = int(st.session_state.df.at[idx_row,"Pontua√ß√£o"])
                    st.session_state.inativos.append({"Projetista":name,"Pontua√ß√£o":pontos,"removetime":pd.Timestamp.now()})
                    # marcar historico entradas com "(Inativo)"
                    mask = st.session_state.historico["Projetista"]==name
                    st.session_state.historico.loc[mask,"Projetista"] = st.session_state.historico.loc[mask,"Projetista"].apply(lambda x: f"{x} (Inativo)")
                    # liberar vaga (apaga nome no df)
                    st.session_state.df.loc[idx_row, ["Projetista","Classe","Pontua√ß√£o"]] = ["-","-",0]
                    st.session_state.pending_desativacao = None
                    st.sidebar.success(f"Projetista '{name}' desativado e vaga liberada. Hist√≥rico marcado como Inativo.")
        else:
            st.sidebar.info("Nenhum projetista ativo para desativar.")

    # Reativar
    with st.sidebar.expander("‚ôªÔ∏è Reativar Projetista", expanded=False):
        inativos = st.session_state.inativos
        if not inativos:
            st.sidebar.info("Nenhum projetista inativo.")
        else:
            nomes_inativos = [i["Projetista"] for i in inativos]
            sel_re = st.selectbox("Selecionar inativo", options=nomes_inativos, key="react_sel")
            # choose disciplina and sala to place them
            disc_re = st.selectbox("Disciplina ao reativar", options=["Hidrossanit√°rio","El√©trica"], key="react_disc")
            salas_op_re = [s for s,e in SALAS_INFO if e==disc_re]
            sala_re = st.selectbox("Sala", options=salas_op_re, key="react_sala")
            classe_re = st.selectbox("Classe", options=CLASSES, key="react_classe")
            if st.button("Reativar projetista"):
                # find vaga
                vagas = st.session_state.df[(st.session_state.df["Sala"]==sala_re) & (st.session_state.df["Projetista"]=="-")]
                if vagas.empty:
                    st.sidebar.error("Sala escolhida n√£o tem vaga livre. Escolha outra sala.")
                else:
                    salvar_snapshot()
                    vaga_idx = vagas.index[0]
                    # restore pontua√ß√£o from inativos list
                    entry = next((x for x in st.session_state.inativos if x["Projetista"]==sel_re), None)
                    pontos_restore = entry["Pontua√ß√£o"] if entry else 0
                    st.session_state.df.at[vaga_idx,"Projetista"] = sel_re
                    st.session_state.df.at[vaga_idx,"Equipe"] = disc_re
                    st.session_state.df.at[vaga_idx,"Classe"] = classe_re
                    st.session_state.df.at[vaga_idx,"Pontua√ß√£o"] = pontos_restore
                    # remove "(Inativo)" suffix from historico
                    st.session_state.historico["Projetista"] = st.session_state.historico["Projetista"].apply(lambda x: x.replace(f"{sel_re} (Inativo)", sel_re) if isinstance(x,str) else x)
                    # remove from inativos list
                    st.session_state.inativos = [x for x in st.session_state.inativos if x["Projetista"]!=sel_re]
                    st.sidebar.success(f"Projetista {sel_re} reativado na sala {sala_re} (classe {classe_re}).")

    # Gerenciar demandas (criar/validar) - mant√©m l√≥gica anterior
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìã Demandas (Criar / Validar)")
    with st.sidebar.form("form_dem"):
        nome_demanda = st.text_input("Nome da demanda", key="dem_name")
        disc_dem = st.selectbox("Disciplina", options=["Hidrossanit√°rio","El√©trica"], key="dem_disc")
        ativos_para_dem = st.session_state.df[(st.session_state.df["Equipe"]==disc_dem) & (st.session_state.df["Projetista"]!="-")]["Projetista"].tolist()
        selec_proj = st.selectbox("Projetista", options=ativos_para_dem) if ativos_para_dem else None
        param = st.selectbox("Par√¢metro", options=list(CRITERIOS.keys()), key="dem_param")
        crit_ops = [f"{n} - {f} -> {r}" for (n,f,r) in CRITERIOS[param]]
        crit_sel = st.selectbox("Crit√©rio", options=crit_ops, key="dem_crit")
        sub = st.form_submit_button("Validar defini√ß√£o de ponto")
        if sub:
            if not nome_demanda.strip() or not selec_proj or not crit_sel:
                st.sidebar.warning("Preencha tudo corretamente.")
            else:
                try:
                    nota = int(crit_sel.split(" - ")[0])
                    resumo = crit_sel.split("->")[-1].strip()
                except:
                    st.sidebar.error("Erro ao interpretar crit√©rio.")
                    st.stop()
                salvar_snapshot()
                pts = pontos_por_nota(nota)
                if pts==0:
                    st.sidebar.info("Nota <=7: registrado no hist√≥rico, sem atribui√ß√£o de pontos.")
                else:
                    st.session_state.df.loc[st.session_state.df["Projetista"]==selec_proj,"Pontua√ß√£o"] += pts
                    st.sidebar.success(f"{pts} ponto(s) adicionados ao {selec_proj}.")
                nova = {"Timestamp":pd.Timestamp.now(),"Disciplina":disc_dem,"Demanda":nome_demanda.strip(),"Projetista":selec_proj,"Par√¢metro":param,"Nota":nota,"Resumo":resumo,"PontosAtribu√≠dos":pts}
                st.session_state.historico = pd.concat([pd.DataFrame([nova]), st.session_state.historico], ignore_index=True)

    # Gerenciar hist√≥rico: editar/excluir (mant√©m l√≥gica anterior simplificada)
    st.sidebar.markdown("---")
    st.sidebar.subheader("‚úèÔ∏è Gerenciar Hist√≥rico (Editar / Excluir)")
    if st.session_state.historico.empty:
        st.sidebar.info("Sem hist√≥rico.")
    else:
        max_idx = max(0,len(st.session_state.historico)-1)
        idx = st.sidebar.number_input("√çndice (0 = mais recente)", min_value=0, max_value=max_idx, value=0, key="hist_idx")
        action = st.sidebar.selectbox("A√ß√£o", options=["Alterar","Excluir"], key="hist_action")
        new_param = st.sidebar.selectbox("Novo Par√¢metro", options=list(CRITERIOS.keys()), key="hist_new_param")
        new_crit_ops = [f"{n} - {f} -> {r}" for (n,f,r) in CRITERIOS[new_param]]
        new_crit = st.sidebar.selectbox("Novo Crit√©rio", options=new_crit_ops, key="hist_new_crit")
        if st.sidebar.button("Confirmar a√ß√£o no hist√≥rico"):
            sorted_hist = st.session_state.historico.sort_values("Timestamp", ascending=False).reset_index()
            if idx < 0 or idx >= len(sorted_hist):
                st.sidebar.error("√çndice inv√°lido.")
            else:
                actual_idx = int(sorted_hist.loc[idx,"index"])
                linha = st.session_state.historico.loc[actual_idx].to_dict()
                proj = linha["Projetista"]
                pts_old = int(linha["PontosAtribu√≠dos"]) if pd.notna(linha["PontosAtribu√≠dos"]) else 0
                if action == "Excluir":
                    salvar_snapshot()
                    # se pontuou, subtrai do projetista ativo (se exist)
                    if pts_old>0 and isinstance(proj,str) and not proj.endswith("(Inativo)"):
                        if proj in st.session_state.df["Projetista"].values:
                            st.session_state.df.loc[st.session_state.df["Projetista"]==proj,"Pontua√ß√£o"] -= pts_old
                            st.session_state.df.loc[st.session_state.df["Projetista"]==proj,"Pontua√ß√£o"] = st.session_state.df.loc[st.session_state.df["Projetista"]==proj,"Pontua√ß√£o"].clip(lower=0)
                    st.session_state.historico = st.session_state.historico.drop(index=actual_idx).reset_index(drop=True)
                    st.sidebar.success("Entrada do hist√≥rico exclu√≠da e pontua√ß√£o ajustada.")
                else:
                    salvar_snapshot()
                    # subtrai antigos
                    if pts_old>0 and isinstance(proj,str) and not proj.endswith("(Inativo)"):
                        if proj in st.session_state.df["Projetista"].values:
                            st.session_state.df.loc[st.session_state.df["Projetista"]==proj,"Pontua√ß√£o"] -= pts_old
                            st.session_state.df.loc[st.session_state.df["Projetista"]==proj,"Pontua√ß√£o"] = st.session_state.df.loc[st.session_state.df["Projetista"]==proj,"Pontua√ß√£o"].clip(lower=0)
                    # aplica novos
                    try:
                        new_nota = int(new_crit.split(" - ")[0])
                        new_res = new_crit.split("->")[-1].strip()
                    except:
                        st.sidebar.error("Erro ao interpretar novo crit√©rio.")
                        new_nota = None
                    novos_pts = pontos_por_nota(new_nota) if new_nota is not None else 0
                    st.session_state.historico.at[actual_idx,"Par√¢metro"] = new_param
                    st.session_state.historico.at[actual_idx,"Nota"] = new_nota
                    st.session_state.historico.at[actual_idx,"Resumo"] = new_res
                    st.session_state.historico.at[actual_idx,"PontosAtribu√≠dos"] = novos_pts
                    # aplica novos pontos
                    if novos_pts>0 and isinstance(proj,str) and not proj.endswith("(Inativo)"):
                        if proj in st.session_state.df["Projetista"].values:
                            st.session_state.df.loc[st.session_state.df["Projetista"]==proj,"Pontua√ß√£o"] += novos_pts
                    st.sidebar.success("Entrada do hist√≥rico alterada e pontua√ß√£o ajustada.")

    # Undo
    st.sidebar.markdown("---")
    if st.sidebar.button("‚Ü©Ô∏è Desfazer √∫ltima a√ß√£o"):
        desfazer()

    # Backup / Import
    st.sidebar.markdown("---")
    st.sidebar.subheader("üíæ Backup / Import")
    if st.sidebar.button("üì¶ Criar Backup (ZIP)"):
        calcular_rankings()
        buf = io.BytesIO()
        with zipfile.ZipFile(buf,"w",zipfile.ZIP_DEFLATED) as zf:
            zf.writestr("projetistas.csv", st.session_state.df.to_csv(index=False))
            zf.writestr("historico_demandas.csv", st.session_state.historico.to_csv(index=False))
        buf.seek(0)
        fn = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
        st.sidebar.download_button("‚¨áÔ∏è Baixar Backup", data=buf.getvalue(), file_name=fn, mime="application/zip")
        st.sidebar.success("Backup pronto para download.")
    uploaded = st.sidebar.file_uploader("üìÇ Importar Backup (ZIP)", type=["zip"])
    if uploaded is not None:
        try:
            z = zipfile.ZipFile(io.BytesIO(uploaded.read()))
            names = z.namelist()
            if "projetistas.csv" not in names or "historico_demandas.csv" not in names:
                st.sidebar.error("ZIP inv√°lido.")
            else:
                df_new = pd.read_csv(z.open("projetistas.csv"))
                hist_new = pd.read_csv(z.open("historico_demandas.csv"), parse_dates=["Timestamp"])
                # minimal validation
                req_df = {"Sala","Equipe","Classe","Projetista","Pontua√ß√£o"}
                req_hist = {"Timestamp","Disciplina","Demanda","Projetista","Par√¢metro","Nota","Resumo","PontosAtribu√≠dos"}
                if not req_df.issubset(set(df_new.columns)) or not req_hist.issubset(set(hist_new.columns)):
                    st.sidebar.error("Estrutura inv√°lida nos CSVs.")
                else:
                    st.session_state.df = df_new.copy()
                    st.session_state.historico = hist_new.copy()
                    st.sidebar.success("Dados importados com sucesso.")
        except Exception as e:
            st.sidebar.error(f"Erro ao ler ZIP: {e}")

    st.sidebar.caption("Sistema com hist√≥rico e reativa√ß√£o. Use o backup para preservar cen√°rios de teste.")

# Footer note
st.markdown("---")
st.caption("Observa√ß√£o: hist√≥rico conserva entradas marcadas como (Inativo). Use a se√ß√£o Reativar para trazer algu√©m de volta com sua pontua√ß√£o original (se dispon√≠vel).")
