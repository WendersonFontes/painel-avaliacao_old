# app.py
# Painel de Avalia√ß√£o de Projetistas - vers√£o Streamlit
# Cole este arquivo como app.py e rode com `streamlit run app.py`

import streamlit as st
import pandas as pd
import io, zipfile, os
from datetime import datetime
import copy

st.set_page_config(page_title="Painel de Avalia√ß√£o - Streamlit", layout="wide")

# -----------------------
# Configura√ß√£o inicial
# -----------------------
SENHA_PADRAO = "1234"
VAGAS_POR_SALA = 6
SALAS_INFO = [(1, "Hidrossanit√°rio"), (2, "Hidrossanit√°rio"), (3, "El√©trica"), (4, "El√©trica")]
CLASSES = ["S", "A", "B", "C", "D"]

# Crit√©rios: (nota, frase, resumo)
CRITERIOS = {
    "Qualidade T√©cnica": [
        (10, "Nenhum erro, projeto independente", "Acur√°cia 100%"),
        (9,  "Quase sem falhas, ainda n√£o independente", "Acur√°cia >90%"),
        (8,  "Bom projeto, ajustes de organiza√ß√£o", "Ajustes leves de organiza√ß√£o"),
        (7,  "Bom projeto, alguns ajustes t√©cnicos", "Ajustes t√©cnicos solicitados"),
        (6,  "Projeto razo√°vel, muitos coment√°rios", "Razo√°vel, precisa de revis√£o"),
        (5,  "Uso errado de materiais ou modelagem", "Erro de materiais/modelagem"),
        (4,  "Erro grave em 1 projeto", "Erro grave √∫nico"),
        (3,  "Dois ou mais erros graves", "Erros graves m√∫ltiplos")
    ],
    "Proatividade": [
        (10, "4 ou mais a√ß√µes al√©m do b√°sico", "Proativo extremo"),
        (9,  "3 a√ß√µes", "Muito proativo"),
        (8,  "2 a√ß√µes", "Proativo"),
        (7,  "1 a√ß√£o", "Alguma proatividade"),
        (6,  "Faz o b√°sico e pede novas demandas", "B√°sico + iniciativa m√≠nima"),
        (5,  "Fala que acabou, mas n√£o quer novos projetos", "Pouca disposi√ß√£o"),
        (3,  "Nenhuma a√ß√£o", "Inativo")
    ],
    "Colabora√ß√£o em equipe": [
        (10, "Sempre ajuda primeiro, acompanha at√© resolver", "Sempre ajuda primeiro"),
        (9,  "Frequentemente ajuda primeiro e acompanha", "Ajuda frequente"),
        (8,  "Boa disposi√ß√£o, ajuda, mas n√£o √© o primeiro", "Dispon√≠vel para ajudar"),
        (6,  "Oferece ajuda, mas pouco disposto", "Ajuda limitada"),
        (5,  "S√≥ escuta, n√£o se envolve", "Escuta passiva"),
        (3,  "Nunca ajuda, n√£o se disp√µe", "N√£o colaborativo")
    ],
    "Comunica√ß√£o": [
        (10, "Clareza total, escuta ativa, escreve bem", "Comunica√ß√£o perfeita"),
        (9,  "Clareza, escuta ativa, e-mails/WhatsApp ok", "Comunica√ß√£o boa"),
        (7,  "Clareza, escuta ativa, mas escrita ruim", "Comunica√ß√£o com falhas"),
        (6,  "Clareza m√©dia, escuta/ escrita irregular", "Comunica√ß√£o m√©dia"),
        (5,  "Clareza limitada, escuta irregular", "Comunica√ß√£o fraca"),
        (3,  "N√£o comunica claramente, n√£o escuta", "Comunica√ß√£o ruim")
    ],
    "Organiza√ß√£o / Planejamento": [
        (10, "Muito organizado, ajuda o coordenador", "Organiza√ß√£o exemplar"),
        (9,  "Organizado, segue procedimentos, sugere melhorias", "Organizado e propositivo"),
        (7,  "Respeita procedimentos, sem sugest√£o", "Organizado b√°sico"),
        (6,  "Uma chamada de aten√ß√£o", "Pouco organizado"),
        (5,  "Duas chamadas de aten√ß√£o", "Desorganizado"),
        (3,  "Tr√™s ou mais chamadas", "Muito desorganizado")
    ],
    "Dedica√ß√£o em estudos": [
        (10, "Anota sempre, faz cursos, aplica treinamentos, traz solu√ß√µes", "Estudo constante e aplicado"),
        (9,  "Anota, faz cursos, aproveita treinamentos, √†s vezes traz solu√ß√µes", "Estudo aplicado"),
        (7,  "Anota √†s vezes, raramente traz solu√ß√µes", "Dedica√ß√£o parcial"),
        (6,  "Anota pouco, n√£o faz cursos, n√£o traz solu√ß√µes", "Pouca dedica√ß√£o"),
        (5,  "Repete perguntas, n√£o usa cursos", "Dedica√ß√£o m√≠nima"),
        (3,  "Repete muitas vezes, n√£o aproveita cursos", "Sem dedica√ß√£o")
    ],
    "Cumprimento de prazos": [
        (10, "Nenhum atraso", "Pontualidade total"),
        (9,  "1 atraso justificado", "Quase pontual"),
        (8,  "2 atrasos justificados", "Pontualidade razo√°vel"),
        (7,  "3 atrasos justificados", "Atrasos frequentes"),
        (6,  "4 atrasos justificados", "Atrasos cont√≠nuos"),
        (5,  "1 atraso n√£o justificado", "Atraso sem justificativa"),
        (4,  "2 atrasos n√£o justificados", "Atrasos problem√°ticos"),
        (3,  "Mais de 2 atrasos n√£o justificados", "Muito atrasado")
    ],
    "Engajamento com Odoo": [
        (10, "Usa todos apps, sugere melhorias, cobra colegas", "Engajamento total"),
        (9,  "Usa boa parte dos apps, abre todo dia, cobra colegas", "Engajamento alto"),
        (7,  "Usa parte dos apps, abre todo dia, n√£o cobra colegas", "Engajamento moderado"),
        (6,  "Usa parte dos apps, abre todo dia, mas n√£o durante todo o dia", "Uso limitado"),
        (5,  "Usa apenas parte dos apps, abre de forma irregular", "Uso m√≠nimo"),
        (3,  "N√£o usa corretamente, resiste √† ferramenta", "Resist√™ncia total")
    ]
}

# -----------------------
# Helpers
# -----------------------
def pontos_por_nota(nota):
    if nota == 10: return 3
    if nota == 9: return 2
    if nota == 8: return 1
    return 0

def init_session_state():
    if "df" not in st.session_state:
        rows = []
        for sala, equipe in SALAS_INFO:
            for _ in range(VAGAS_POR_SALA):
                rows.append({"Sala": sala, "Equipe": equipe, "Classe": "-", "Projetista": "-", "Pontua√ß√£o": 0})
        st.session_state.df = pd.DataFrame(rows)
    if "historico" not in st.session_state:
        st.session_state.historico = pd.DataFrame(columns=[
            "Timestamp", "Disciplina", "Demanda", "Projetista", "Par√¢metro", "Nota", "Resumo", "PontosAtribu√≠dos"
        ])
    if "last_df" not in st.session_state:
        st.session_state.last_df = None
    if "last_hist" not in st.session_state:
        st.session_state.last_hist = None
    if "logged" not in st.session_state:
        st.session_state.logged = False
    if "status_msg" not in st.session_state:
        st.session_state.status_msg = ""

init_session_state()

def salvar_snapshot_para_undo():
    st.session_state.last_df = st.session_state.df.copy(deep=True)
    st.session_state.last_hist = st.session_state.historico.copy(deep=True)

def desfazer_ultima_acao():
    if st.session_state.last_df is None and st.session_state.last_hist is None:
        st.warning("N√£o h√° a√ß√£o anterior para desfazer.")
        return
    st.session_state.df = st.session_state.last_df.copy(deep=True) if st.session_state.last_df is not None else st.session_state.df
    st.session_state.historico = st.session_state.last_hist.copy(deep=True) if st.session_state.last_hist is not None else st.session_state.historico
    st.session_state.last_df = None
    st.session_state.last_hist = None
    st.success("√öltima a√ß√£o desfeita com sucesso.")

def calcular_rankings():
    df = st.session_state.df
    df["RankingClasse"] = "-"
    for classe in CLASSES:
        subset = df[df["Classe"] == classe].copy()
        if subset.empty: continue
        subset_sorted = subset.sort_values("Pontua√ß√£o", ascending=False)
        for rank, (idx, _) in enumerate(subset_sorted.iterrows(), start=1):
            if df.at[idx, "Pontua√ß√£o"] > 0:
                df.at[idx, "RankingClasse"] = rank
            else:
                df.at[idx, "RankingClasse"] = "-"
    st.session_state.df = df

def atualizar_dropdowns():
    # in Streamlit we simply read from session_state when building selects
    pass

# -----------------------
# UI: barra lateral - Autentica√ß√£o / Informa√ß√µes
# -----------------------
st.sidebar.title("Acesso")
senha = st.sidebar.text_input("Senha do Coordenador", type="password")
if st.sidebar.button("Entrar"):
    if senha == SENHA_PADRAO:
        st.session_state.logged = True
        st.session_state.status_msg = ""
        st.sidebar.success("Acesso concedido")
    else:
        st.session_state.logged = False
        st.session_state.status_msg = "Senha incorreta!"
        st.sidebar.error("Senha incorreta!")

if st.session_state.status_msg:
    st.sidebar.warning(st.session_state.status_msg)

# Show summary counts at top
def mostrar_resumo_topo():
    df = st.session_state.df
    ativos = df[df["Projetista"]!="-"]
    total_ativos = len(ativos)
    total_vagas = len(df)
    vagas_livres = total_vagas - total_ativos
    hid_ativos = len(ativos[ativos["Equipe"]=="Hidrossanit√°rio"])
    ele_ativos = len(ativos[ativos["Equipe"]=="El√©trica"])
    st.markdown(f"**Projetistas ativos:** {total_ativos} ‚Äî **Vagas livres:** {vagas_livres}  \nHidrossanit√°rio: {hid_ativos} | El√©trica: {ele_ativos}")

mostrar_resumo_topo()

# -----------------------
# Fun√ß√£o para exibir visualiza√ß√µes principais
# -----------------------
def exibir_painel_principal():
    st.header("Painel de Gest√£o - Visualiza√ß√µes")
    calcular_rankings()
    df = st.session_state.df.copy()

    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Por Sala")
        for sala in sorted(df["Sala"].unique()):
            equipe = df[df["Sala"]==sala]["Equipe"].iloc[0]
            st.write(f"üè¢ **Sala {sala}** ({equipe})")
            subset = df[df["Sala"]==sala][["Projetista","Equipe","Classe","RankingClasse","Pontua√ß√£o"]].reset_index(drop=True)
            st.dataframe(subset, use_container_width=True)
    with col2:
        st.subheader("Ranking por Classes (unificado entre disciplinas)")
        for classe in CLASSES:
            sub = df[df["Classe"]==classe].sort_values("Pontua√ß√£o", ascending=False)
            if not sub.empty:
                st.write(f"**Classe {classe}**")
                st.dataframe(sub[["Projetista","Equipe","Sala","Pontua√ß√£o","RankingClasse"]].reset_index(drop=True), use_container_width=True)
        st.subheader("Ranking Geral")
        geral = df[df["Projetista"]!="-"].sort_values("Pontua√ß√£o", ascending=False).reset_index(drop=True)
        if not geral.empty:
            geral_display = geral.copy()
            geral_display["Ranking Geral"] = geral_display.index + 1
            geral_display["Ranking Geral"] = geral_display.apply(lambda x: x["Ranking Geral"] if x["Pontua√ß√£o"]>0 else "-", axis=1)
            st.dataframe(geral_display[["Ranking Geral","Projetista","Equipe","Classe","Sala","RankingClasse","Pontua√ß√£o"]], use_container_width=True)
        else:
            st.info("Nenhum projetista alocado ainda.")
    st.markdown("---")
    st.subheader("Hist√≥rico de Demandas (acumulativo)")
    hist = st.session_state.historico.copy()
    if hist.empty:
        st.info("Nenhuma demanda registrada ainda.")
    else:
        # show two tabs: Hidro / Eletrica
        t1, t2 = st.tabs(["Hidrossanit√°rio","El√©trica"])
        with t1:
            hid = hist[hist["Disciplina"]=="Hidrossanit√°rio"].sort_values("Timestamp", ascending=False).reset_index(drop=True)
            if not hid.empty:
                st.dataframe(hid, use_container_width=True)
            else:
                st.info("Nenhuma demanda para Hidrossanit√°rio.")
        with t2:
            ele = hist[hist["Disciplina"]=="El√©trica"].sort_values("Timestamp", ascending=False).reset_index(drop=True)
            if not ele.empty:
                st.dataframe(ele, use_container_width=True)
            else:
                st.info("Nenhuma demanda para El√©trica.")

# -----------------------
# Show main view (always visible)
# -----------------------
exibir_painel_principal()

# -----------------------
# Coordinator panel (only if logged)
# -----------------------
st.sidebar.markdown("---")
st.sidebar.header("Painel do Coordenador")
if not st.session_state.logged:
    st.sidebar.info("Fa√ßa login com a senha para ver o painel do coordenador.")
else:
    # Controls
    st.sidebar.subheader("Gerenciamento de Projetistas")
    # Add new projetista
    with st.sidebar.expander("‚ûï Adicionar Projetista", expanded=False):
        novo_nome = st.text_input("Nome do Projetista", key="input_novo_nome")
        disciplina = st.selectbox("Disciplina", options=["Hidrossanit√°rio","El√©trica"], key="input_disciplina")
        # determine salas available for discipline
        salas_op = [s for s,e in SALAS_INFO if e==disciplina]
        seleciona_sala = st.selectbox("Sala", options=salas_op, key="input_sala")
        classe_nova = st.selectbox("Classe", options=CLASSES, key="input_classe")
        if st.button("Adicionar Projetista"):
            if not novo_nome.strip():
                st.warning("Digite um nome v√°lido.")
            else:
                vagas = st.session_state.df[(st.session_state.df["Sala"]==seleciona_sala) & (st.session_state.df["Projetista"]=="-")]
                if vagas.empty:
                    st.error("Sala cheia! Remova algu√©m primeiro.")
                else:
                    salvar_snapshot_para_undo()
                    idx = vagas.index[0]
                    st.session_state.df.at[idx,"Projetista"] = novo_nome.strip()
                    st.session_state.df.at[idx,"Equipe"] = disciplina
                    st.session_state.df.at[idx,"Classe"] = classe_nova
                    st.session_state.df.at[idx,"Pontua√ß√£o"] = 0
                    st.success(f"Projetista '{novo_nome}' adicionado √† sala {seleciona_sala} ({disciplina}) na classe {classe_nova}.")

    # Rename
    with st.sidebar.expander("‚úèÔ∏è Renomear Projetista", expanded=False):
        ativos = st.session_state.df[st.session_state.df["Projetista"]!="-"]["Projetista"].tolist()
        selecionado_rename = st.selectbox("Projetista", options=ativos, key="rename_select") if ativos else None
        novo_nome_rename = st.text_input("Novo nome", key="rename_input")
        if st.button("Atualizar nome"):
            if not selecionado_rename or not novo_nome_rename.strip():
                st.warning("Escolha projetista e digite novo nome.")
            else:
                salvar_snapshot_para_undo()
                st.session_state.df.loc[st.session_state.df["Projetista"]==selecionado_rename,"Projetista"] = novo_nome_rename.strip()
                st.success("Nome atualizado.")

    # Alterar classe
    with st.sidebar.expander("üè∑Ô∏è Alterar Classe", expanded=False):
        ativos2 = st.session_state.df[st.session_state.df["Projetista"]!="-"]["Projetista"].tolist()
        selecionado_classe = st.selectbox("Projetista", options=ativos2, key="classe_select") if ativos2 else None
        nova_classe = st.selectbox("Nova Classe", options=CLASSES, key="classe_nova_select")
        if st.button("Alterar Classe"):
            if not selecionado_classe:
                st.warning("Selecione um projetista.")
            else:
                salvar_snapshot_para_undo()
                st.session_state.df.loc[st.session_state.df["Projetista"]==selecionado_classe,"Classe"] = nova_classe
                st.success("Classe alterada.")

    # Remover
    with st.sidebar.expander("üóëÔ∏è Remover Projetista", expanded=False):
        ativos3 = st.session_state.df[st.session_state.df["Projetista"]!="-"]["Projetista"].tolist()
        selecionado_remover = st.selectbox("Projetista", options=ativos3, key="remover_select") if ativos3 else None
        if st.button("Remover Projetista"):
            if not selecionado_remover:
                st.warning("Selecione um projetista para remover.")
            else:
                salvar_snapshot_para_undo()
                st.session_state.df.loc[st.session_state.df["Projetista"]==selecionado_remover, ["Projetista","Classe","Pontua√ß√£o","RankingClasse"]] = ["-","-",0,"-"]
                st.success("Projetista removido e vaga liberada.")

    # Quick add points
    with st.sidebar.expander("‚ûï Adicionar Pontos (r√°pido)", expanded=False):
        ativos4 = st.session_state.df[st.session_state.df["Projetista"]!="-"]["Projetista"].tolist()
        escolha_add = st.selectbox("Projetista", options=ativos4, key="addpts_select") if ativos4 else None
        qtd_pts = st.number_input("Pontos", min_value=1, max_value=100, value=1, step=1, key="addpts_qtd")
        if st.button("Adicionar Pontos (r√°pido)"):
            if not escolha_add:
                st.warning("Selecione um projetista.")
            else:
                salvar_snapshot_para_undo()
                st.session_state.df.loc[st.session_state.df["Projetista"]==escolha_add,"Pontua√ß√£o"] += int(qtd_pts)
                st.success("Pontos adicionados.")

    st.sidebar.markdown("---")
    # Demandas
    st.sidebar.subheader("üìã Demandas (Criar / Validar)")
    with st.sidebar.form("form_demanda"):
        demanda_nome = st.text_input("Nome da Demanda")
        demanda_disciplina = st.selectbox("Disciplina", options=["Hidrossanit√°rio","El√©trica"])
        # projetistas filtrados
        ativos5 = st.session_state.df[(st.session_state.df["Equipe"]==demanda_disciplina) & (st.session_state.df["Projetista"]!="-")]["Projetista"].tolist()
        demanda_projetista = st.selectbox("Projetista", options=ativos5) if ativos5 else None
        parametro = st.selectbox("Par√¢metro", options=list(CRITERIOS.keys()))
        # monta crit√©rios
        criterios_op = [f"{nota} - {frase} -> {resumo}" for (nota,frase,resumo) in CRITERIOS[parametro]]
        criterio = st.selectbox("Crit√©rio", options=criterios_op)
        submit_demanda = st.form_submit_button("Validar defini√ß√£o de ponto")
        if submit_demanda:
            if not demanda_nome.strip() or not demanda_projetista or not criterio:
                st.warning("Preencha demanda, disciplina, projetista e crit√©rio.")
            else:
                try:
                    nota = int(criterio.split(" - ")[0])
                    resumo = criterio.split("->")[-1].strip()
                except Exception:
                    st.error("N√£o foi poss√≠vel interpretar o crit√©rio. Tente novamente.")
                    st.stop()
                salvar_snapshot_para_undo()
                pontos = pontos_por_nota(nota)
                if pontos == 0:
                    st.warning("Nota <= 7: n√£o √© poss√≠vel pontuar. A entrada ser√° registrada no hist√≥rico sem pontos.")
                else:
                    st.session_state.df.loc[st.session_state.df["Projetista"]==demanda_projetista,"Pontua√ß√£o"] += pontos
                    st.success(f"{pontos} ponto(s) adicionados ao {demanda_projetista}.")
                nova = {
                    "Timestamp": pd.Timestamp.now(),
                    "Disciplina": demanda_disciplina,
                    "Demanda": demanda_nome.strip(),
                    "Projetista": demanda_projetista,
                    "Par√¢metro": parametro,
                    "Nota": nota,
                    "Resumo": resumo,
                    "PontosAtribu√≠dos": pontos
                }
                st.session_state.historico = pd.concat([pd.DataFrame([nova]), st.session_state.historico], ignore_index=True)
    st.sidebar.markdown("---")

    # Gerenciar demandas: editar / excluir (index corresponde √† exibi√ß√£o ordenada por Timestamp desc)
    st.sidebar.subheader("‚úèÔ∏è Gerenciar Demandas (Editar / Excluir)")
    if st.session_state.historico.empty:
        st.sidebar.info("Nenhuma demanda no hist√≥rico.")
    else:
        max_idx = max(0, len(st.session_state.historico)-1)
        idx_manage = st.sidebar.number_input("√çndice (0 = mais recente)", min_value=0, max_value=max_idx, value=0, step=1, key="manage_idx")
        action = st.sidebar.selectbox("A√ß√£o", options=["Alterar","Excluir"], key="manage_action")
        new_param = st.sidebar.selectbox("Novo Par√¢metro (para Alterar)", options=list(CRITERIOS.keys()), key="manage_new_param")
        new_crit_ops = [f"{nota} - {frase} -> {resumo}" for (nota,frase,resumo) in CRITERIOS[new_param]]
        new_crit = st.sidebar.selectbox("Novo Crit√©rio (para Alterar)", options=new_crit_ops, key="manage_new_crit")
        if st.sidebar.button("Confirmar A√ß√£o"):
            # map display index to actual index in historico
            sorted_hist = st.session_state.historico.sort_values("Timestamp", ascending=False).reset_index()
            if idx_manage < 0 or idx_manage >= len(sorted_hist):
                st.sidebar.error("√çndice inv√°lido.")
            else:
                actual_idx = int(sorted_hist.loc[idx_manage,"index"])
                # show confirmation area
                if action == "Excluir":
                    # confirm deletion
                    if st.sidebar.button("Confirmar exclus√£o ‚Äî Sim, excluir agora"):
                        salvar_snapshot_para_undo()
                        linha = st.session_state.historico.loc[actual_idx].to_dict()
                        proj = linha["Projetista"]
                        pts_ant = int(linha["PontosAtribu√≠dos"]) if pd.notna(linha["PontosAtribu√≠dos"]) else 0
                        if pts_ant > 0 and proj and proj!="-":
                            if proj in st.session_state.df["Projetista"].values:
                                st.session_state.df.loc[st.session_state.df["Projetista"]==proj,"Pontua√ß√£o"] -= pts_ant
                                st.session_state.df.loc[st.session_state.df["Projetista"]==proj,"Pontua√ß√£o"] = st.session_state.df.loc[st.session_state.df["Projetista"]==proj,"Pontua√ß√£o"].clip(lower=0)
                        st.session_state.historico = st.session_state.historico.drop(index=actual_idx).reset_index(drop=True)
                        st.success("Demanda exclu√≠da e pontua√ß√£o (se aplic√°vel) ajustada.")
                else:
                    # Alterar
                    if st.sidebar.button("Confirmar altera√ß√£o ‚Äî Sim, aplicar"):
                        salvar_snapshot_para_undo()
                        linha = st.session_state.historico.loc[actual_idx].to_dict()
                        proj = linha["Projetista"]
                        pts_ant = int(linha["PontosAtribu√≠dos"]) if pd.notna(linha["PontosAtribu√≠dos"]) else 0
                        # subtrai pontos antigos
                        if pts_ant > 0 and proj and proj!="-":
                            if proj in st.session_state.df["Projetista"].values:
                                st.session_state.df.loc[st.session_state.df["Projetista"]==proj,"Pontua√ß√£o"] -= pts_ant
                                st.session_state.df.loc[st.session_state.df["Projetista"]==proj,"Pontua√ß√£o"] = st.session_state.df.loc[st.session_state.df["Projetista"]==proj,"Pontua√ß√£o"].clip(lower=0)
                        # parse new
                        try:
                            nova_nota = int(new_crit.split(" - ")[0])
                            novo_resumo = new_crit.split("->")[-1].strip()
                        except Exception:
                            st.sidebar.error("Erro ao interpretar o crit√©rio novo.")
                            nova_nota = None
                        novos_pts = pontos_por_nota(nova_nota) if nova_nota is not None else 0
                        # update historico
                        st.session_state.historico.at[actual_idx,"Par√¢metro"] = new_param
                        st.session_state.historico.at[actual_idx,"Nota"] = nova_nota
                        st.session_state.historico.at[actual_idx,"Resumo"] = novo_resumo
                        st.session_state.historico.at[actual_idx,"PontosAtribu√≠dos"] = novos_pts
                        # aplicar novos pontos
                        if novos_pts > 0 and proj and proj!="-":
                            if proj in st.session_state.df["Projetista"].values:
                                st.session_state.df.loc[st.session_state.df["Projetista"]==proj,"Pontua√ß√£o"] += novos_pts
                        st.success("Demanda alterada e pontua√ß√£o ajustada.")

    st.sidebar.markdown("---")
    # Undo
    if st.sidebar.button("‚Ü©Ô∏è Desfazer √öltima A√ß√£o"):
        desfazer_ultima_acao()

    st.sidebar.markdown("---")
    # Backup & Import
    st.sidebar.subheader("üíæ Backup / Import")
    # Backup: create zip in memory and provide download
    if st.sidebar.button("üì¶ Criar Backup (ZIP)"):
        calcular_rankings()
        buffer = io.BytesIO()
        with zipfile.ZipFile(buffer, "w", zipfile.ZIP_DEFLATED) as zf:
            zf.writestr("projetistas.csv", st.session_state.df.to_csv(index=False))
            zf.writestr("historico_demandas.csv", st.session_state.historico.to_csv(index=False))
        buffer.seek(0)
        ts = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"backup_{ts}.zip"
        st.sidebar.download_button("‚¨áÔ∏è Baixar Backup (ZIP)", data=buffer.getvalue(), file_name=filename, mime="application/zip")
        st.sidebar.success("Backup pronto. Use o bot√£o para baixar o arquivo ZIP.")

    uploaded = st.sidebar.file_uploader("üìÇ Importar Backup (ZIP)", type=["zip"])
    if uploaded is not None:
        # read zip and validate
        try:
            z = zipfile.ZipFile(io.BytesIO(uploaded.read()))
            names = z.namelist()
            if "projetistas.csv" not in names or "historico_demandas.csv" not in names:
                st.sidebar.error("ZIP inv√°lido: faltam 'projetistas.csv' ou 'historico_demandas.csv'.")
            else:
                with z.open("projetistas.csv") as f:
                    df_new = pd.read_csv(f)
                with z.open("historico_demandas.csv") as f:
                    hist_new = pd.read_csv(f, parse_dates=["Timestamp"])
                # minimal validation
                req_df_cols = {"Sala","Equipe","Classe","Projetista","Pontua√ß√£o"}
                req_hist_cols = {"Timestamp","Disciplina","Demanda","Projetista","Par√¢metro","Nota","Resumo","PontosAtribu√≠dos"}
                if not req_df_cols.issubset(set(df_new.columns)) or not req_hist_cols.issubset(set(hist_new.columns)):
                    st.sidebar.error("Estrutura dos CSVs n√£o corresponde ao esperado.")
                else:
                    st.session_state.df = df_new.copy()
                    st.session_state.historico = hist_new.copy()
                    st.success("Dados importados com sucesso! Painel atualizado.")
        except Exception as e:
            st.sidebar.error(f"Erro ao ler ZIP: {e}")

    st.sidebar.markdown("---")
    st.sidebar.caption("Vers√£o Streamlit do Painel de Avalia√ß√£o. Use o backup para preservar cen√°rios de teste.")

# -----------------------
# Footer / extras
# -----------------------
st.markdown("---")
st.caption("Observa√ß√£o: √≠ndices mostrados no hist√≥rico (no app) est√£o ordenados por Timestamp decrescente ‚Äî √≠ndice 0 corresponde √† demanda mais recente. Use o painel do coordenador (barra lateral) para gerenciar e testar.")

